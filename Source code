import pygame
import os
import math
import sys
import random
import neat

screen_width = 1500
screen_height = 800
generation = 0

class Car:
    def __init__(self):
        self.surface = pygame.image.load(r"C:\Users\yugan\OneDrive\Desktop\4-2 ET - 12\car.png")
        self.surface = pygame.transform.scale(self.surface, (100, 100))
        self.rotate_surface = self.surface
        self.pos = [700, 650]
        self.angle = 0
        self.speed = 100
        self.center = [self.pos[0] + 50, self.pos[1] + 50]
        self.radars = []
        self.radars_for_draw = []
        self.is_alive = True
        self.goal = False
        self.distance = 0
        self.time_spent = 0

    def draw(self, screen):
        screen.blit(self.rotate_surface, self.pos)
        self.draw_radar(screen)

    def draw_radar(self, screen):
        for r in self.radars:
            pos, dist = r
            pygame.draw.line(screen, (0, 255, 0), self.center, pos, 1)
            pygame.draw.circle(screen, (0, 255, 0), pos, 5)

    def check_collision(self, map):
        self.is_alive = True
        for p in self.four_points:
            if map.get_at((int(p[0]), int(p[1]))) == (255, 255, 255, 255):
                self.is_alive = False
                break

    def check_radar(self, degree, map):
        length = 0
        x = int(self.center[0] + math.cos(math.radians(360 - (self.angle + degree))) * length)
        y = int(self.center[1] + math.sin(math.radians(360 - (self.angle + degree))) * length)

        while not map.get_at((x, y)) == (255, 255, 255, 255) and length < 300:
            length += 1
            x = int(self.center[0] + math.cos(math.radians(360 - (self.angle + degree))) * length)
            y = int(self.center[1] + math.sin(math.radians(360 - (self.angle + degree))) * length)

        dist = int(math.sqrt((x - self.center[0]) ** 2 + (y - self.center[1]) ** 2))
        self.radars.append([(x, y), dist])

    def update(self, map):
        self.speed = 15
        self.rotate_surface = self.rot_center(self.surface, self.angle)

        self.pos[0] += math.cos(math.radians(360 - self.angle)) * self.speed
        self.pos[0] = max(20, min(self.pos[0], screen_width - 120))

        self.pos[1] += math.sin(math.radians(360 - self.angle)) * self.speed
        self.pos[1] = max(20, min(self.pos[1], screen_height - 120))

        self.distance += self.speed
        self.time_spent += 1

        self.center = [int(self.pos[0]) + 50, int(self.pos[1]) + 50]
        length = 40
        left_top = [self.center[0] + math.cos(math.radians(360 - (self.angle + 30))) * length,
                    self.center[1] + math.sin(math.radians(360 - (self.angle + 30))) * length]
        right_top = [self.center[0] + math.cos(math.radians(360 - (self.angle + 150))) * length,
                     self.center[1] + math.sin(math.radians(360 - (self.angle + 150))) * length]
        left_bottom = [self.center[0] + math.cos(math.radians(360 - (self.angle + 210))) * length,
                       self.center[1] + math.sin(math.radians(360 - (self.angle + 210))) * length]
        right_bottom = [self.center[0] + math.cos(math.radians(360 - (self.angle + 330))) * length,
                        self.center[1] + math.sin(math.radians(360 - (self.angle + 330))) * length]

        self.four_points = [left_top, right_top, left_bottom, right_bottom]

        self.check_collision(map)
        self.radars.clear()
        for d in range(-90, 120, 45):
            self.check_radar(d, map)

    def get_data(self):
        ret = [int(r[1] / 30) for r in self.radars]
        while len(ret) < 5:
            ret.append(0)
        return ret

    def get_alive(self):
        return self.is_alive

    def get_reward(self):
        return self.distance / 50.0

    def rot_center(self, image, angle):
        orig_rect = image.get_rect()
        rot_image = pygame.transform.rotate(image, angle)
        rot_rect = orig_rect.copy()
        rot_rect.center = rot_image.get_rect().center
        rot_image = rot_image.subsurface(rot_rect).copy()
        return rot_image

def run_car(genomes, config):
    global generation
    generation += 1

    nets = []
    cars = []

    for id, g in genomes:
        net = neat.nn.FeedForwardNetwork.create(g, config)
        nets.append(net)
        g.fitness = 0
        cars.append(Car())

    pygame.init()
    screen = pygame.display.set_mode((screen_width, screen_height))
    clock = pygame.time.Clock()
    map = pygame.image.load(r"C:\Users\yugan\OneDrive\Desktop\4-2 ET - 12\map.png")

    start_ticks = pygame.time.get_ticks()  # Start time

    while True:
        seconds = (pygame.time.get_ticks() - start_ticks) / 1000  # Elapsed seconds
        if seconds >= 20:
            break  # Close GUI after 20 seconds

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit(0)

        for index, car in enumerate(cars):
            output = nets[index].activate(car.get_data())
            i = output.index(max(output))
            car.angle += 10 if i == 0 else -10

        remain_cars = 0
        for i, car in enumerate(cars):
            if car.get_alive():
                remain_cars += 1
                car.update(map)
                genomes[i][1].fitness += car.get_reward()

        if remain_cars == 0:
            break

        screen.blit(map, (0, 0))
        for car in cars:
            if car.get_alive():
                car.draw(screen)

        pygame.display.flip()
        clock.tick(0)

    total_distance = sum(car.distance for car in cars)
    total_time = sum(car.time_spent for car in cars)
    rounds = len(cars)
    avg_distance = total_distance / rounds
    avg_time = total_time / rounds
    avg_speed = avg_distance / avg_time if avg_time != 0 else 0
    best_fitness = max(g[1].fitness for g in genomes)

    print(f"\nGeneration {generation}")
    print(f"Total Cars: {rounds}")
    print(f"Average Distance: {avg_distance:.2f}")
    print(f"Average Time: {avg_time:.2f}")
    print(f"Average Speed: {avg_speed:.2f}")
    print(f"Best Fitness: {best_fitness:.2f}\n")

    pygame.quit()

if __name__ == "__main__":
    config_path = r"C:\Users\yugan\Downloads\config-feedforward.txt"
    config = neat.config.Config(
        neat.DefaultGenome,
        neat.DefaultReproduction,
        neat.DefaultSpeciesSet,
        neat.DefaultStagnation,
        config_path
    )

    p = neat.Population(config)

    # Removed: neat.StdOutReporter
    # p.add_reporter(neat.StdOutReporter(True))

    stats = neat.StatisticsReporter()
    p.add_reporter(stats)

    p.run(run_car, 1000)
